let $ = require('jquery');
let joint = require('jointjs/dist/joint.js');
let Backbone = require('backbone');
let moment = require('moment');
let _ = require('lodash');

let settingsTemplate = require('../../templates/settings.html');
let metadataTemplate = require('../../templates/metadata.html');

export let SettingsView = Backbone.View.extend({
    template: _.template(settingsTemplate),
    metadataTemplate: _.template(metadataTemplate),
    // Bind the content of the input fields to the model
    bindings: {
        '#settingsWorkflowNameInput': 'workflowName',
        '#settingsAuthorInput': 'author',
        '#settingsCreated': {
            observe: 'created',
            onGet: 'formatDate'
        },
        '#settingsLastChange': {
            observe: 'lastChanged',
            onGet: 'formatDate'
        }
    },
    // Bind events to appropriate functions
    events: {},
    listenerAdded: false,
    initialize: function(model, workspaceGraph, workflowNameInput, authorInput) {
        this.model = model;
        this.workspaceGraph = workspaceGraph;
        this.workflowNameInput = workflowNameInput;
        this.authorInput = authorInput;

        // Set the dates of creation and last change
        !this.model.get('created') && this.model.set('created', new Date());
        !this.model.get('lastChanged') && this.model.set('lastChanged', new Date());

        // Listen to changes and update the date of the last change
        let self = this;
        this.workspaceGraph.on('add remove change', function() {
            self.updateLastChanged();
        });
        this.model.on('change', function() {
            if (self.model.changedAttributes().hasOwnProperty('lastChanged')) {
                return;
            }
            self.updateLastChanged();
        });
    },
    render: function() {
        let settingsModalSelector = '.reveal-overlay > #settingsModal';
        // Remove the old settings modal
        $(settingsModalSelector).parent().remove();
        this.$el.html(this.template({model: this.model}));
        if (!this.listenerAdded) {
            this.addMetadataButtonListener();
            // this.createListenerForSettingSynchronisation();
            this.renderMetadataSection();
            this.$el.foundation();
            // Set element to the generated settings root element (generated by foundation)
            this.$el = $(settingsModalSelector).parent();
            this.stickit();
            this.listenerAdded = true;
        }
    },
    // Format date
    formatDate: function(date) {
        return moment(date).format('DD.MM.YYYY HH:mm');
    },
    updateLastChanged: function() {
        this.model.set('lastChanged', new Date());
    },
    // Add a key value pair to the metadata
    addMetadataButtonListener: function() {
        let self = this;
        this.$el.find('#addMetadataButton').on('click', function() {
            // Add empty key value pair
            self.model.get('metadata').push({
                key: '',
                value: ''
            });
            self.renderMetadataSection();
        });
    },
    // Re-render the metadata section and re-create the bindings
    renderMetadataSection: function() {
        // Re-render the metadata section
        this.$el.find('#metadataSection').html(this.metadataTemplate({model: this.model}));
        // Add bindings for all metadata inputs for data synchronization
        this.addBindings();
        // Scroll to bottom if the settings view is higher than the viewport
        this.$el.scrollTop(this.$el.children(':first').height());
    },
    // Add bindings for all metadata inputs for data synchronization
    addBindings: function() {
        for (let i = 0; i < this.model.get('metadata').length; i++) {
            this.addInputBinding('key', i);
            this.addInputBinding('value', i);
            this.addRemoveButtonBinding(i);
        }
    },
    // Create a listener for the metadata attribute
    addInputBinding: function(type, index) {
        let self = this;
        this.$el.find('#metadata-' + type + '-' + index).on('propertychange change click keyup input paste', function() {
            self.model.get('metadata')[index][type] = $(this).val();
        });
    },
    // Add a click listener remove button
    addRemoveButtonBinding: function(index) {
        let self = this;
        this.$el.find('#remove-metadata-' + index).on('click', function() {
            // Remove the metadata row from the array
            delete self.model.get('metadata').splice(index, 1);
            // Re-render the section
            self.renderMetadataSection();
        });
    }
});