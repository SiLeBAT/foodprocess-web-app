let $ = require('jquery');
let joint = require('jointjs/dist/joint.js');
let Backbone = require('backbone');
let moment = require('moment');
let _ = require('lodash');

let timetableTemplate = require('../../templates/timetable.html');
let timetableListTemplate = require('../../templates/timetableList.html');

export let TimetableView = Backbone.View.extend({
    template: _.template(timetableTemplate),
    timetableListTemplate: _.template(timetableListTemplate),
    emptyModel: new Backbone.Model(),
    // Bind the content of the input fields to the model
    bindings: {
        '#timetableTimeInput': 'timetableTime',
        '#timetableValueInput': 'timetableValue'
    },
    // Bind events to appropriate functions
    listenerAdded: false,
    initialize: function(model) {
        this.model = model;
    },
    render: function() {
        this.$el.html(this.template({model: this.model}));

        if (!this.listenerAdded) {
            this.$el.find('#timetableListSection').html(this.timetableListTemplate({model: this.model}));
            this.addPropertyListener();
            this.addBindings();
            this.stickit();
            this.listenerAdded = true;
        }
    },

    updateLastChanged: function() {
        this.model.set('lastChanged', new Date()); // TODO
    },
    // Add a key value pair to the metadata
    addPropertyListener: function() {
        let self = this;
        this.$el.find('#addTimetableListButton').on('click', function() {
            // Add empty key value pair
            self.model.get('pressureTimeValues').push({ // TODO
                key: '',
                value: ''
            });
            // Set element to the generated settings root element (generated by foundation)
            self.$el = $('.reveal-overlay');
            // Re-render the metadata section
            self.$el.find('#timetableListSection').html(self.timetableListTemplate({model: self.model}));
            // Add bindings for all metadata inputs for data synchronization
            self.addBindings();
            // Scroll to bottom if the settings view is higher than the viewport
            self.$el.scrollTop(self.$el.children(':first').height());
        });

        // TODO Update last changed when edits are made
    },
    // Add bindings for all metadata inputs for data synchronization
    addBindings: function() {
        for (let i = 0; i < this.model.get('pressureTimeValues').length; i++) { // TODO
            this.addMetadataBinding('key', i);
            this.addMetadataBinding('value', i);
        }
    },
    // Create a listener for the metadata attribute
    addMetadataBinding: function(type, index) {
        let self = this;
        this.$el.find('#timetableList-' + type + '-' + index).on('propertychange change click keyup input paste', function() {
            self.model.get('pressureTimeValues')[index][type] = $(this).val(); // TODO
        });
    }
});